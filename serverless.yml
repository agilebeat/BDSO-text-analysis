# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bdso # NOTE: update this with your service name

provider:
  name: aws
  runtime: python3.7
  stage: text-analysis
  region: us-east-2

# you can add packaging information here
package:
  exclude:
    - python.venv/**

functions:
  single_post:
    handler: singlepost.singlepostHandler
    timeout: 30
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          - "logs:DescribeLogStreams"
        Resource: "arn:aws:logs:*:*:*"
      - Effect: "Allow"
        Action: "lambda:InvokeFunction"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "s3:GetObjectAcl"
          - "s3:PutObject"
          - "s3:PutObjectAcl"
          - "s3:PutObjectTagging"
          - "s3:PutObjectVersionAcl"
          - "s3:PutObjectVersionTagging"
        Resource: "*"
    events:
      - http:
          reqValidatorName: 'singlepostInputValidator'
          path: singlepost
          method: post
          cors: true
          private: false
          request:
            schema:
              "application/json": ${file(api-gateway-models/input.json)}

  barplot:
    handler: barplot.barplotHandler
    timeout: 30
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          - "logs:DescribeLogStreams"
        Resource: "arn:aws:logs:*:*:*"
      - Effect: "Allow"
        Action: "lambda:InvokeFunction"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "s3:GetObjectAcl"
          - "s3:PutObject"
          - "s3:PutObjectAcl"
          - "s3:PutObjectTagging"
          - "s3:PutObjectVersionAcl"
          - "s3:PutObjectVersionTagging"
        Resource: "*"
    events:
      - http:
          reqValidatorName: 'barplotInputValidator'
          path: barplot
          method: post
          cors: true
          private: false
          request:
            schema:
              "application/json": ${file(api-gateway-models/barplot.json)}

  topicmodeling:
    handler: topicmodeling.topicmodelingHandler
    timeout: 30
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          - "logs:DescribeLogStreams"
        Resource: "arn:aws:logs:*:*:*"
      - Effect: "Allow"
        Action: "lambda:InvokeFunction"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "s3:GetObjectAcl"
          - "s3:PutObject"
          - "s3:PutObjectAcl"
          - "s3:PutObjectTagging"
          - "s3:PutObjectVersionAcl"
          - "s3:PutObjectVersionTagging"
        Resource: "*"
    events:
      - http:
          reqValidatorName: 'topicmodelingInputValidator'
          path: topicmodeling
          method: post
          cors: true
          private: false
          request:
            schema:
              "application/json": ${file(api-gateway-models/topicmodeling.json)}

# you can add CloudFormation resource templates here
resources:
  Resources:
    singlepostInputValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'singlepostInputValidator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    barplotInputValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'barplotInputValidator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    topicmodelingInputValidator:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'topicmodelInputValidator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false



plugins:
  - serverless-python-requirements
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-custom-roles
custom:
  pythonRequirements:
    dockerizePip: false
    zip: true
    slim: false
    noDeploy:
      - boto3
      - botocore
      - docutils
      - jmespath
      - pip
      - python-dateutil
      - s3transfer
      - setuptools
      - six
      - tensorboard
      - tensorflow
  documentation:
    api:
      info:
        version: "v0.0.1"
        title: "BDSO_Agilebeat API"
        description: "BDSO_Agilebeat API - text analysis"

